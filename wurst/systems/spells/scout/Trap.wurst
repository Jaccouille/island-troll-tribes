package Trap

import AbilityObjEditing
import BuffObjEditing
import RegisterEvents
import UnitExtensions
import ClosureForGroups
import ObjectIdGenerator
import Orders
import DummyCaster
import ObjectIds
import ID
import Assets
import Lodash
import LegacyColors
import ToolTipsUtils

let SPIKED_TRAP_COOLDOWN = 75.
let SPIKED_TRAP_DURATION = 60.
let TRACK_TRAP_COOLDOWN  = 150.
let TRAP_EFFECT_RADIUS   = 200.
let TRAP_DURATION = 600.

let TOOL_TIP_NORM_TRACK_TRAP  = "Tracking Trap"
let TOOL_TIP_NORM_SPIKED_TRAP = "Spiked Trap"

let ABILITY_TRAP_EXPLOSION   = compiletime(ABIL_ID_GEN.next())
let ABILITY_SPIKED_TRAP_SLOW = compiletime(ABIL_ID_GEN.next())
let BUFF_SPIKED_TRAP_SLOW    = compiletime(BUFF_ID_GEN.next())
let BUFF_SPIKED_TRAP_ORIGINAL_ID = 'Bcri'

let SPIKED_TRAP_SLOW_DURATION = 5.
let SPIKED_TRAP_MS_SLOW = 0.80

let MANACOST = 10

let TOOL_TIP_EXT_TRACK_TRAP = "Troll walking through this trap will get tracked, having their position revealed and armor reduced by {0} for {1} seconds."
                              .format(COLOR_RED+"4|r", COLOR_LIGHT_BLUE+"30|r")+" Track Trap last {0} seconds, has {1} seconds cooldown."
let TOOL_TIP_EXT_SPIKED_TRAP = "An itchy trap, troll who walks on it will get slowed by {0} for {1} seconds. Spiked Trap last {2} seconds, has {3} seconds cooldown."
                               .format(SPIKED_TRAP_MS_SLOW.toToolTipOrange(), SPIKED_TRAP_SLOW_DURATION.toToolTipOrange(), SPIKED_TRAP_DURATION.toToolTipLightBlue(),
                               SPIKED_TRAP_COOLDOWN.toToolTipLightBlue())

let TRAP_SPELLBOOK = commaList(SPELL_TRACK_TRAP, SPELL_SPIKED_TRAP)

function createBuff()
    new BuffDefinition(BUFF_SPIKED_TRAP_SLOW, BUFF_SPIKED_TRAP_ORIGINAL_ID)
        ..setIcon(Icons.bTNMeatapult)
        ..setArtTarget(1, Objects.humanBloodCinematicEffect)
        ..setTargetAttachmentPoint0(1, "chest")
        ..setTooltipNormal(1, "Spike Trap Slow")
        ..setTooltipNormalExtended(1, "This unit has been crippled by an spiked trap, it's movement speed has been greatly reduced.")

class TrapUnit extends UnitDefinition
    construct(int newUnitId, string name)
        super(newUnitId, 'otot')
        this.setNormalAbilities(commaList("Aeth",  ABILITY_TRAP_EXPLOSION.toRawCode()))
        this.setName(name)
        this.setIconGameInterface(Icons.bTNStasisTrap)
        this.setModelFile(Units.stasisTotem)
        this.setHitPointsMaximumBase(15)
        this.setDeathTimeseconds(3)
        this.setSightRadiusDay(200)
        this.setSightRadiusNight(200)
class SpikedTrapUnit extends TrapUnit
    construct(int newUnitId, string name)
        super(newUnitId, name)
        this.setIconGameInterface(Icons.bTNMeatapult)
        this.setModelFile("Models\\SpikedTrap.mdx")
        this.setScalingValue(1)

class SpikedTrapSlowSpell extends AbilityDefinitionCripple
    construct(int newAbility)
        super(newAbility)
        this.setIconNormal(Icons.bTNMeatapult)
        this.setManaCost(1, 0)
        this.setDurationHero(1, SPIKED_TRAP_SLOW_DURATION)
        this.setDamageReduction(1, 0)
        this.setAttackSpeedReduction(1, 0)
        this.setMovementSpeedReduction(1, SPIKED_TRAP_MS_SLOW)
        this.setRequirements("")
        this.setBuffs(1, BUFF_SPIKED_TRAP_SLOW.toRawCode())

class TrackTrapSpell extends AbilityDefinitionStasisTrap
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId)
        this.setRequirements("")
        this.setLevels(3)
        this.setHeroAbility(true)
        this.setLevelSkipRequirement(0)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOL_TIP_NORM_TRACK_TRAP)
        this.presetTooltipNormal(lvl -> makeToolTipNormHero(hotkey, TOOL_TIP_NORM_TRACK_TRAP, lvl))
        this.presetTooltipNormalExtended(lvl -> TOOL_TIP_EXT_TRACK_TRAP.format(TRAP_DURATION.toToolTipLightBlue(), (TRACK_TRAP_COOLDOWN - lvl * 30).toToolTipLightBlue()))
        this.setTooltipLearn(makeToolTipLearn(TOOL_TIP_NORM_TRACK_TRAP))
        this.setTooltipLearnExtended(makeToolTipLearn(TOOL_TIP_EXT_TRACK_TRAP.format(TRAP_DURATION.toToolTipLightBlue(), COLOR_LIGHT_BLUE+"150/120/90|r")))
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setIconNormal(Icons.bTNStasisTrap)
        this.setIconResearch(Icons.bTNStasisTrap)
        this.presetManaCost(lvl -> MANACOST)
        this.presetCooldown(lvl -> TRACK_TRAP_COOLDOWN - lvl * 30)
        this.presetDetonationRadius(lvl -> 100)
        this.presetDetectionRadius(lvl -> 100)
        this.presetDurationHero(lvl -> 0.1)
        this.presetStunDuration(lvl -> 0.1)
        this.presetDurationNormal(lvl -> TRAP_DURATION)
        this.presetWardUnitType(lvl -> UNIT_TRAP.toRawCode())
        this.setAnimationNames("spell,throw")

class SpyTrackTrapSpell extends TrackTrapSpell
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, hotkey, buttonPos)
        this.setLevels(1)
        this.setHeroAbility(false)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, TOOL_TIP_NORM_TRACK_TRAP))
        this.setTooltipNormalExtended(1, TOOL_TIP_EXT_TRACK_TRAP.format(TRAP_DURATION.toToolTipLightBlue(), (TRACK_TRAP_COOLDOWN - 90).toToolTipLightBlue()))
        this.setCooldown(1, TRACK_TRAP_COOLDOWN - 90)

class SpikedTrapSpell extends AbilityDefinitionShadowHunterSerpentWard
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId)
        this.setHeroAbility(false)
        this.setLevels(1)
        this.setRequirements("")
        this.setAnimationNames("spell,slam")
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setIconNormal(Icons.bTNMeatapult)
        this.setManaCost(1, MANACOST)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOL_TIP_NORM_SPIKED_TRAP)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, TOOL_TIP_NORM_SPIKED_TRAP))
        this.setTooltipNormalExtended(1, TOOL_TIP_EXT_SPIKED_TRAP)
        this.setCastRange(1, 100)
        this.setDurationNormal(1, SPIKED_TRAP_DURATION)
        this.setCooldown(1, SPIKED_TRAP_COOLDOWN)
        this.setSummonedUnitType(1, UNIT_SPIKED_TRAP.toRawCode())

function createTrapExplosionSpell()
    new AbilityDefinitionMine(ABILITY_TRAP_EXPLOSION)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(1)
        ..setCastRange(1, TRAP_EFFECT_RADIUS + 50)
        ..setActivationDelay(1, 5)
        ..setTargetsAllowed(1, "Hero")

@compiletime function createTrapSpells()
    createBuff()
    new TrapUnit      (UNIT_TRAP       , "Track Trap" )
    new SpikedTrapUnit(UNIT_SPIKED_TRAP, "Spiked Trap")

    new SpikedTrapSlowSpell(ABILITY_SPIKED_TRAP_SLOW)

    new TrackTrapSpell   (SPELL_TRACK_TRAP    , "W", new Pair(0, 0))
    new SpyTrackTrapSpell(SPELL_SPY_TRACK_TRAP, "W", new Pair(0, 0))
    new SpikedTrapSpell  (SPELL_SPIKED_TRAP   , "Q", new Pair(1, 0))

    createTrapExplosionSpell()


function onCast(unit trap)
    forUnitsInRange(trap.getPos(), TRAP_EFFECT_RADIUS) u ->
        if u.isTroll() and u.getOwner().isEnemyOf(trap.getOwner())
            let dummy = new DummyCaster()
            dummy.owner(trap.getOwner())
            dummy.origin(trap.getPos() + vec2(100, 0))
            if  trap.getTypeId() == UNIT_TRAP
                dummy.castTarget(SPELL_TRACKER_TRACK, 1, Orders.faeriefire, u)
            else if trap.getTypeId() == UNIT_SPIKED_TRAP
                dummy.castTarget(ABILITY_SPIKED_TRAP_SLOW, 1, Orders.cripple, u)

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH) ->
        let dyingUnit = GetDyingUnit()

        if dyingUnit.getTypeId() == UNIT_TRAP
            onCast(dyingUnit)
        else if dyingUnit.getTypeId() == UNIT_SPIKED_TRAP
            onCast(dyingUnit)