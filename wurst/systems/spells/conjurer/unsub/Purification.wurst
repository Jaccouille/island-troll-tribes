package Purification

import ChannelAbilityPreset
import ID
import Lodash
import Assets
import ToolTipsUtils
import RegisterEvents
import HealingSystem
import ClosureTimers
import ClosureForGroups
import ClosureEvents

constant CAST_RANGE = 3000.
constant COOLDOWN = 15.
constant MANACOST = 15
constant AOE = 200.

let HEALING_AMOUNT = 50.
let DAMAGE_AMOUNT = 50.

constant TOOLTIP_NORM = "Purification"
constant TOOLTIP_EXTENDED = "Heal a friendly unit for {0} and deals {1} damage to its surrounding enemies in a short radius."
                            .format(HEALING_AMOUNT.toToolTipGreen(), DAMAGE_AMOUNT.toToolTipRed())
constant TARGET_ALLOWED = "air,ground,friend,vuln,invu,self,organic,nonancient,neutral"

class Purification extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        this.setIconNormal(Icons.bTNRegenerate)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.presetCastRange(lvl -> CAST_RANGE)
        this.presetCastingTime(lvl -> 0)
        this.presetFollowThroughTime(lvl -> 1)
        this.presetCooldown(lvl -> COOLDOWN)
        this.presetManaCost(lvl -> MANACOST)
        this.presetTargetType(lvl -> 1)
        this.presetTargetsAllowed(lvl -> TARGET_ALLOWED)
        this.presetOptions(lvl -> 1)
        this.presetBaseOrderID(lvl -> "heal")
        this.setHeroAbility(false)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM)
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, TOOLTIP_NORM))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXTENDED)

@compiletime function createRangedHeal()
    new Purification(SPELL_PURIFICATION, "R", new Pair(3, 0))

init
    EventListener.onTargetCast(SPELL_PURIFICATION) (unit caster, unit target) ->
        var target = GetSpellTargetUnit()
        new HealingInstance(target, HEALING_AMOUNT, HealingType.ABILITY)
        let healFx = target.addEffect(Abilities.replenishHealthCasterOverhead, "overhead")
        doAfter(1.5) ->
            healFx.destr()
        forUnitsInRange(target.getPos(), AOE) (unit u) ->
            if u.isEnemyOf(target.getOwner()) and not u.isInvulnerable() and u.isAlive()
                let dmgFx = u.addEffect(Abilities.deathCoilSpecialArt, "origin")
                target.damageTarget(u, DAMAGE_AMOUNT)
                doAfter(1.0) ->
                    dmgFx.destr()
