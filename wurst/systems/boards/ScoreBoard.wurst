package ScoreBoard

import Game
import ClosureTimers
import Boards
import LinkedList
import PlayerExtensions
import HashMap
import Assets
import PlayerScore
import Lodash
import LocalAssets
import StringExtensions
import ColorUtils
import RegisterEvents
import Tribe

constant UPDATE_PERIOD = 1.0
constant KILL_COLUMN_WIDTH = 0.055
constant STAT_LABEL_WIDTH = 0.09

constant boardItemLabel = asList(new Pair("Elk", Icons.bTNStag),
                                 new Pair("Hawk", Icons.bTNWarEagle ),
                                 new Pair("Snake", Icons.bTNWindSerpent ),
                                 new Pair("Wolf", Icons.bTNTimberWolf ),
                                 new Pair("Bear", Icons.bTNFrostBear ),
                                 new Pair("Panther", LocalIcons.bTNPanther),
                                 new Pair("Damage Dealt", Icons.bTNCriticalStrike),
                                 new Pair("Healing Done", Icons.bTNHeal),
                                 new Pair("Gold Acquired", Icons.bTNMGExchange),
                                 new Pair("Meat Eaten", Icons.bTNMonsterLure)
                                )

class Row
    let pos = 0



/**
Display players's score on a board, supposed to be displayed to observers
**/
public class ScoreBoard
    static multiboard board = CreateMultiboard()
    CallbackPeriodic cb
    static let playerList = new HashMap<int, player>
    static let tribeRow = new HashMap<int, Tribe>

    var rowNbr = 0

    construct()
        this.cb = doPeriodically(UPDATE_PERIOD, cb -> updateBoard())
        createBoard()

    function createBoard()
        let tribes = Tribe.getTribes()
        var row = 1

        for tribe in tribes
            tribeRow.put(row, tribe)
            row++
            for member in tribe.getMembers()
                playerList.put(row, member)
                row++
        rowNbr = row

        board
        ..setColumnCount(12)
        ..setRowCount(playerList.size() + 1)
        ..setTitle("Score Board")
        ..display(false)
        ..minimize()

        createLabel()
        for i = 1 to rowNbr + 1
            createRowContent(i)

    function createLabel()
        let row = 0
        var column = 0

        //First Row
        //Player Label
        board
        .getItem(row, column)
        ..setStyle(true, false)
        ..setValue("Player".color(GOLD_COLOR))
        ..setWidth(0.1)
        ..release()
        column++

        //Level Label
        board
        .getItem(row, column)
        ..setStyle(true, false)
        ..setValue("Level".color(HIGHLIGHT_COLOR))
        ..setWidth(0.05)
        ..release()
        column++

        //Init Player Kill & Score Label
        for label in boardItemLabel
            board
            .getItem(row, column)
            ..setStyle(true, true)
            ..setValue(label.a.color(HIGHLIGHT_COLOR))
            ..setIcon(label.b)
            ..setWidth(column < 8 ? KILL_COLUMN_WIDTH : STAT_LABEL_WIDTH)
            ..release()
            column++

    function createRowContent(int row)
        var column = 0

        let isTribe = tribeRow.has(row)
        //Player label
        board
        .getItem(row, column)
        ..setStyle(true, false)
        ..setValue(isTribe ? tribeRow.get(row).getName() : playerList.get(row).getName())
        ..setWidth(0.1)
        ..release()
        column++

        if isTribe
            //Level Label
            board
            .getItem(row, column)
            ..setStyle(true, true)
            ..setWidth(0.05)
            ..release()
        column++

        //PlayerKill Label
        for j = 0 to animalName.size() - 1
            board
            .getItem(row, column)
            ..setStyle(true, false)
            ..setWidth(KILL_COLUMN_WIDTH)
            ..release()
            column++

        //Damage dealt to troll label
        board
        .getItem(row, column)
        ..setStyle(true, false)
        ..setValueColor(255, 0, 0, 255)
        ..setWidth(STAT_LABEL_WIDTH)
        ..release()
        column++

        //Healing done label
        board
        .getItem(row, column)
        ..setStyle(true, false)
        ..setValueColor(0, 255, 0, 255)
        ..setWidth(STAT_LABEL_WIDTH)
        ..release()
        column++

        //Gold acquired Label
        board
        .getItem(row, column)
        ..setStyle(true, false)
        ..setValueColor(255, 255, 0, 255)
        ..setWidth(STAT_LABEL_WIDTH)
        ..release()
        column++

        //Meat eaten Label
        board
        .getItem(row, column)
        ..setStyle(true, false)
        ..setValueColor(255, 161, 0, 255)
        ..setWidth(STAT_LABEL_WIDTH)
        ..release()

    static function updateLeaverName(int row)
        let p = playerList.get(row)

        board
            .getItem(row, 0)
            ..setValue(p.getName().color(GRAY_COLOR))
            ..release()

    function setTrollLevel(int row)
        let p = playerList.get(row)

        board
            .getItem(row, 1)
            ..setValue(p.getTroll().getLevel().toString())
            ..release()

    function setTrollIcon(int row)
        let p = playerList.get(row)

        board
            .getItem(row, 1)
            ..setIcon(p.getTrollIcon())
            ..release()

    function setPlayerKill(int row)
        let p = playerList.get(row)

        let score = playerScores.get(p)
        var column = 2

        for unitType in score.playerKill
            board
                .getItem(row, column)
                ..setValue(score.playerKill.get(unitType).toString())
                ..release()
            column++

    function setDamageDealt(player p)
        let row = getPlayerRow(p)
        let score = playerScores.get(p)

        board
        .getItem(row, 8)
        ..setValue(score.damageTroll.toString())
        ..release()

    function setHealingDone(player p)
        let row = getPlayerRow(p)
        let score = playerScores.get(p)

        board
            .getItem(row, 9)
            ..setValue(score.healTroll.toString())
            ..release()

    function setGoldAcquired(player p)
        let row = getPlayerRow(p)
        let score = playerScores.get(p)
        board
            .getItem(row, 10)
            ..setValue(score.goldAmount.toString())
            ..release()

    function setMeatEaten(player p)
        let row = getPlayerRow(p)
        let score = playerScores.get(p)

        board
            .getItem(row, 11)
            ..setValue(score.meatEaten.toString())
            ..release()

    function updateBoard()
        board.setTitle(getGameTimersBoardTitle())

        for row = 1 to rowNbr
            setTrollLevel  (row)
            setTrollIcon   (row)
            setPlayerKill  (row)
            setDamageDealt (row)
            setHealingDone (row)
            setGoldAcquired(row)
            setMeatEaten   (row)


    static function display(player p)
        board.display(p, true)

    static function hide(player p)
        board.display(p, false)

init
    registerGameStartEvent() ->
        nullTimer() ->
            new ScoreBoard()
            ScoreBoard.display(players[0])

    registerPlayerEvent(EVENT_PLAYER_LEAVE) ->
        if not GetTriggerPlayer().isObserver() and not GetTriggerPlayer().isObserverNew()
            ScoreBoard.updateLeaverName(GetTriggerPlayer())
