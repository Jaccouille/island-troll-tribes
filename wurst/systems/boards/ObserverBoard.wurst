package ObserverBoard

// Standard Library imports:
import Dialog
import LinkedList
import ClosureTimers
import RegisterEvents

// Third-party imports:
import Lodash

// Local imports:
import GameMode
import Tribe
import StringUtils
import PlayerExtensions
import DialogExtensions
import ObserverUI
import Boards

let OPTION_NAME_COLOR = colorA(180, 180, 180, 255)
let OPTION_VALUE_COLOR = colorA(115, 152, 255, 255)

abstract class ObserverBoardControl
    string name
    player whichPlayer

    construct(string name, player whichPlayer)
        this.name = name
        this.whichPlayer = whichPlayer

    function getName() returns string
        return name

    abstract function getInitialValue() returns string
    abstract function onSelect(VoidFunction<string> callback)

class ObserverBoardVisionControl extends ObserverBoardControl
    let options = new LinkedList<string>()

    construct(player whichPlayer)
        super("Vision", whichPlayer)
        options
            ..add("Players")
            ..add("Neutral")
            ..add("Players + Neutral")

        if whichPlayer.isObserverNew()
            for tribe in Tribe.getTribes()
                options.add("Tribe " + (tribe.getId() + 1).toString())

    function setVision(string toWhat)
        switch toWhat
            case "Players"
                for i = 0 to bj_MAX_PLAYER_SLOTS - 1
                    players[i].setPlayerAlliance(whichPlayer, ALLIANCE_SHARED_VISION, i < bj_MAX_PLAYERS)
            case "Neutral"
                for i = 0 to bj_MAX_PLAYER_SLOTS - 1
                    players[i].setPlayerAlliance(whichPlayer, ALLIANCE_SHARED_VISION, i >= bj_MAX_PLAYERS)
            case "Players + Neutral"
                for i = 0 to bj_MAX_PLAYER_SLOTS - 1
                    players[i].setPlayerAlliance(whichPlayer, ALLIANCE_SHARED_VISION, true)
            default
                let tribeId = toWhat.split(" ").get(1).toInt() - 1
                for i = 0 to bj_MAX_PLAYER_SLOTS - 1
                    let tribe = Tribe.ofPlayer(players[i])
                    let share = tribe != null and tribe.getId() == tribeId
                    players[i].setPlayerAlliance(whichPlayer, ALLIANCE_SHARED_VISION, share)

    override function getInitialValue() returns string
        return options.get(0)

    override function onSelect(VoidFunction<string> callback)
        let diag = DialogCreate()
        for option in options
            diag
            .addButton(option, 0)
            .onClick() btn ->
                setVision(option)
                callback.call(option)

        diag.display(whichPlayer, true)


function getObservers() returns LinkedList<player>
    let observers = new LinkedList<player>()
    for i = 0 to bj_MAX_PLAYERS - 1
        let current = players[i]
        if current.isObserver() and current.isIngame()
            observers.add(current)
    return observers

init
    GameMode.onModeSelectionFinish() ->
        let observers = getObservers()
        for observer in observers
            nullTimer() () ->
                scoreBoard.board.display(observer, true)
                enableUIForPlayer(observer)


    registerPlayerEvent(EVENT_PLAYER_END_CINEMATIC) ->
        let observer = GetTriggerPlayer()
        if observer.isObserverNew()
            enableUIForPlayer(observer)
            // TODO: enable observer UI

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELECTED) ->
        let observer = GetTriggerPlayer()
        if observer.isObserverNew()
            let owner = GetTriggerUnit().getOwner()
            observer.setGold(owner.getGold())
            observer.setLumber(owner.getLumber())
