package MixSpells

// Standard lib imports:
import Assets
import ClosureEvents
import ChannelAbilityPreset

// Third party imports:
import Lodash

// Local imports:
import LocalObjectIDs
import ToolTipsUtils
import EffectUtils
import TextTagUtils
import ColorUtils

let COOLDOWN = 50.
let ENERGY_MANACOST = 0
let HEAT_MANACOST = 10
let CAST_RANGE = 500.

let TOOLTIP_NORM = "Mix "

let TARGET_ALLOWED = commaList(
    TargetsAllowed.air,
    TargetsAllowed.enemies,
    TargetsAllowed.friend,
    TargetsAllowed.ground,
    TargetsAllowed.hero,
    TargetsAllowed.notself
)

class MixHeat extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        let toolTipExtended = "The Priest psychically links up with a target. Both unit's heat are drained, pooled, and "+
                              "redistributed equally between the 2 units. Has {0} seconds cooldown.".format(COOLDOWN.toToolTipLightBlue())
        this.setLevels(1)
        this.setCastRange(1, CAST_RANGE)
        this.setManaCost(1, HEAT_MANACOST)
        this.setCooldown(1, COOLDOWN)
        this.setHeroAbility(false)
        this.presetTargetTypes(Targettype.UNIT)
        this.setTargetsAllowed(1, TARGET_ALLOWED)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM+"Heat")
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, TOOLTIP_NORM+"Heat"))
        this.presetTooltipNormalExtended(lvl -> toolTipExtended)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setFollowThroughTime(1, 0.5)
        this.setBaseOrderID(1, "slowoff")
        this.setIconNormal("ReplaceableTextures\\CommandButtons\\BTNHeatDrain.blp")


class MixEnergy extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        let toolTipExtended = "The Priest psychically links up with a target. Both unit's energies are drained, pooled, and "+
                              "redistributed equally between the 2 units. Has {0} seconds cooldown.".format(COOLDOWN.toToolTipLightBlue())
        this.setLevels(1)
        this.setCastRange(1, CAST_RANGE)
        this.setManaCost(1, ENERGY_MANACOST)
        this.setCooldown(1, COOLDOWN)
        this.setHeroAbility(false)
        this.presetTargetTypes(Targettype.UNIT)
        this.setTargetsAllowed(1, TARGET_ALLOWED)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM+"Energy")
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, TOOLTIP_NORM+"Energy"))
        this.presetTooltipNormalExtended(lvl -> toolTipExtended)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setFollowThroughTime(1, 0.5)
        this.setBaseOrderID(1, "slow")
        this.setIconNormal(Icons.bTNManaDrain)


@compiletime function createMixSpells()
    // Master Healer
    new MixEnergy(ABILITY_MH_MIX_ENERGY , "Q", new Pair(0, 0))
    new MixHeat  (ABILITY_MH_MIX_HEAT   , "W", new Pair(1, 0))
    // Priest
    new MixEnergy(ABILITY_MIX_ENERGY , "D", new Pair(2, 1))
    new MixHeat  (ABILITY_MIX_HEAT   , "F", new Pair(3, 1))
    // Sage
    new MixEnergy(ABILITY_SAGE_MIX_ENERGY , "Z", new Pair(0, 2))
    new MixHeat  (ABILITY_SAGE_MIX_HEAT   , "X", new Pair(1, 2))

function getMixDiffStr(int mixDiff) returns string
    return "{0}{1}".format(mixDiff < 0 ? "" : "+", mixDiff.toString())

function mixHeat(unit caster, unit target)
    let targetHeat = target.getOwner().getGold()
    let casterHeat = caster.getOwner().getGold()
    let newHeat = (targetHeat + casterHeat) / 2.00

    createFadingTextTag(target, getMixDiffStr((targetHeat - newHeat).toInt()), COLOR_ORANGE)
    createFadingTextTag(caster, getMixDiffStr((casterHeat - newHeat).toInt()), COLOR_ORANGE)
    target.getOwner().setGold(newHeat.toInt())
    caster.getOwner().setGold(newHeat.toInt())

function mixMana(unit caster, unit target)
    let targetMana = target.getMana()
    let casterMana = caster.getMana()
    let newMana = (targetMana + casterMana) / 2.00

    createFadingTextTag(target, getMixDiffStr((targetMana - newMana).toInt()), COLOR_TURQUOISE)
    createFadingTextTag(caster, getMixDiffStr((casterMana - newMana).toInt()), COLOR_TURQUOISE)
    target.setMana(newMana)
    caster.setMana(newMana)

function onCast()
    let caster = GetSpellAbilityUnit()
    let target = GetSpellTargetUnit()
    let spell = GetSpellAbilityId()

    // Could be prettier, but I am lazy
    if spell == ABILITY_MIX_ENERGY or spell == ABILITY_MH_MIX_ENERGY or spell == ABILITY_SAGE_MIX_ENERGY
        mixMana(caster, target)
        attachLightningFX(caster, target, LIGHTNING_DRAIN_MANA, 1.0)
    else
        mixHeat(caster, target)
        attachLightningFX(caster, target, LIGHTNING_MAGIC_LEASH, 1.0)

init
    registerSpellEffectEvent(ABILITY_MIX_ENERGY      , ()-> onCast())
    registerSpellEffectEvent(ABILITY_MH_MIX_ENERGY   , ()-> onCast())
    registerSpellEffectEvent(ABILITY_SAGE_MIX_ENERGY , ()-> onCast())
    registerSpellEffectEvent(ABILITY_MIX_HEAT        , ()-> onCast())
    registerSpellEffectEvent(ABILITY_MH_MIX_HEAT     , ()-> onCast())
    registerSpellEffectEvent(ABILITY_SAGE_MIX_HEAT   , ()-> onCast())
