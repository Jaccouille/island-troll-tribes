package PetGrowth

// Standard library imports:
import Assets
import ChannelAbilityPreset
import ClosureEvents
import HashMap
import LinkedList
import UpgradeObjEditing

// Local imports:
import LocalAssets
import LocalObjectIDs
import MagicResistance
import Pets
import ToolTipsUtils
import Transformation
import PlayerExtensions
import PetMana
import ColorUtils
import StringExtensions

// Mana cost for all stat growth abilities.
let STAT_MANA_COST = 2

let ATTACK_INCREASE = 1
let ARMOR_INCREASE = 1
let MAGIC_RESIST_INCREASE = 0.10
let HEALTH_INCREASE = 15

let UPGD_NBR_TT = "\n\nYou can upgrade any stat a total of {0} times every time your troll levels up.".format("3").color(ENERGY_COLOR)

// Damage growth variables.
let DAMAGE_TOOLTIP = "Condense Strength"
let DAMAGE_TOOLTIP_EXT = "Increase your pet's damage by {0}.".format(ATTACK_INCREASE.toReal().toToolTipRed())
let DAMAGE_ICON = Icons.bTNStrengthOfTheWild

// Armor growth variables.
let ARMOR_TOOLTIP = "Fortify Armor"
let ARMOR_TOOLTIP_EXT = "Increase your pet's armor by {0}.".format(ARMOR_INCREASE.toReal().toToolTipGreen())

// Magic resistance growth variables.
let MAGIC_RESIST_TOOLTIP = "Magic Resistance"
let MAGIC_RESIST_TOOLTIP_EXT = "Increase your pet's magical resistance by {0}.".format(MAGIC_RESIST_INCREASE.toToolTipBlue())

// Health growth variables
// TODO : Find a better spell name
let HEALTH_TOOLTIP = "Boost Metabolism"
let HEALTH_TOOLTIP_EXT = "Increase your pet's health by {0}, pet become slightly bigger.".format(HEALTH_INCREASE.toString().color(COLOR_GREEN))

// Variables used to grow pet to next stage of life.
let GROWTH_TOOLTIP = "Advance Life"
let GROWTH_TOOLTIP_EXT = "Your pet matures to the next stage of its development."
let GROWTH_MANACOST = 3
let GROWTH_ICON = LocalIcons.bTNAdvanceLife

// Stores the number of available upgrade
let PET_UPGDRADE_REMAINING = new HashMap<player, int>()
let MAX_POINTS_PER_LEVEL = 3


// TODO: Use an upgrade system or abilities instead of manual stat adjustment.
@compiletime function createPetAttackDamageUpgrade() returns UpgradeDefinition
    return new UpgradeDefinition(UPGD_PET_ATTACK_DAMAGE)
        ..addEffectApplyAttackUpgradeBonus()
        ..setLevels(10)
        ..setName(1, "Pets Damage Upgrade")
        ..setClass(UpgradeClass.Melee)
        ..setIcon(1, Icons.bTNStrengthOfTheWild)

@compiletime function createPetArmorUpgrade() returns UpgradeDefinition
    return new UpgradeDefinition(UPGD_PET_ARMOR)
        ..addEffectApplyDefenseUpgradeBonus()
        ..setLevels(10)
        ..setName(1, "Pets Armor Upgrade")
        ..setClass(UpgradeClass.Armor)
        ..setIcon(1, Icons.bTNReinforcedHides)

@compiletime function createPetMagicResistanceUpgrade() returns UpgradeDefinition
    return new UpgradeDefinition(UPGD_PET_MAGIC_RESISTANCE)

@compiletime function createPetHealthUpgrade() returns UpgradeDefinition
    return new UpgradeDefinition(UPGD_PET_HEALTH)
        ..addEffectHitPointBonus(HEALTH_INCREASE, HEALTH_INCREASE)
        ..setLevels(10)
        ..setName(1, "Pets Health Upgrade")
        ..setIcon(1, Icons.bTNStatUp)


// Tracks the amount of armor given to a specific unit.
// Used to calculate new armor as armor carries over between transformations.
let PET_ARMOR = new HashMap<unit, int>()

// Stores the total amount of times a pet upgraded magic resist. Used to reapply stats for new pet.
let TOTAL_MAGIC_RESIST = new HashMap<player, int>()

@compiletime function createPetLvlUpgrade() returns UpgradeDefinition
    return new UpgradeDefinition(UPGD_PET_STATS_ALLOWED)
        ..setName(1, "Upgrade limit reached.")

@compiletime function createPetDamageAbility() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_PET_DAMAGE, 1, true)
        ..setHeroAbility(false)
        ..presetCastRange(lvl -> 99999)
        ..setName("Increase Damage")
        ..setIconNormal(Icons.bTNStrengthOfTheWild)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("Z")
        ..presetCooldown(lvl -> 0)
        ..setManaCost(1, STAT_MANA_COST)
        ..presetTooltipNormal(lvl -> makeToolTipNorm("Z", DAMAGE_TOOLTIP))
        ..presetTooltipNormalExtended(lvl -> DAMAGE_TOOLTIP_EXT)
        ..setRequirementsLevels("1")

@compiletime function createPetArmorAbility() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_PET_ARMOR, 1, true)
        ..setHeroAbility(false)
        ..presetCastRange(lvl -> 99999)
        ..setName("Increase Armor")
        ..setIconNormal(Icons.bTNReinforcedHides)
        ..setButtonPositionNormalX(1)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("X")
        ..presetCooldown(lvl -> 0)
        ..setManaCost(1, STAT_MANA_COST)
        ..presetTooltipNormal(lvl -> makeToolTipNorm("X", ARMOR_TOOLTIP))
        ..presetTooltipNormalExtended(lvl -> ARMOR_TOOLTIP_EXT)
        ..setRequirementsLevels("1")

@compiletime function createPetMagicResistAbility() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_PET_MAGIC_RESIST, 1, true)
        ..setHeroAbility(false)
        ..presetCastRange(lvl -> 99999)
        ..setName("Increase Magic Resistance")
        ..setIconNormal(Icons.bTNThickFur)
        ..setButtonPositionNormalX(2)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("C")
        ..presetCooldown(lvl -> 0)
        ..presetManaCost(lvl -> STAT_MANA_COST)
        ..presetTooltipNormal(lvl -> makeToolTipNorm("C", MAGIC_RESIST_TOOLTIP))
        ..presetTooltipNormalExtended(lvl -> MAGIC_RESIST_TOOLTIP_EXT)
        ..setRequirementsLevels("1")

@compiletime function createPetHealthAbility() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_PET_HEALTH, 1, true)
        ..setHeroAbility(false)
        ..presetCastRange(lvl -> 99999)
        ..setName("Increase Health")
        ..setIconNormal(Icons.bTNStatUp)
        ..setButtonPositionNormalX(3)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("V")
        ..presetCooldown(lvl -> 0)
        ..presetManaCost(lvl -> STAT_MANA_COST)
        ..presetTooltipNormal(lvl -> makeToolTipNorm("V", HEALTH_TOOLTIP))
        ..presetTooltipNormalExtended(lvl -> HEALTH_TOOLTIP_EXT)
        ..setRequirementsLevels("1")


@compiletime function createPetGrowthAbility() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_GROW_PET, 1, true)
        ..setDummyAbility()
        ..setName("Grow Pet")
        ..setIconNormal(GROWTH_ICON)
        ..setButtonPositionNormalX(3)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("V")
        ..setCooldown(1, 0)
        ..setManaCost(1, GROWTH_MANACOST)
        ..setTooltipNormal(1, makeToolTipNorm("V", GROWTH_TOOLTIP))
        ..setTooltipNormalExtended(1, GROWTH_TOOLTIP_EXT)

function growPet(unit pet)
    // Update true value for pet's mana.
    updatePetMana(pet, -GROWTH_MANACOST.toReal())

    // Look up the growth chain for the pet.
    let chain = pet.getPetGrowthChain()

    // Look up the next unit along the chain.
    let next = chain.get(chain.indexOf(pet.getTypeId()) + 1)

    // Grow the pet.
    transformUnit(pet, next)

init
    // EventListener.onCast(ABILITY_PET_DAMAGE       , (unit caster) -> increaseDamage(caster))
    // EventListener.onCast(ABILITY_PET_ARMOR        , (unit caster) -> increaseArmor(caster))
    // EventListener.onCast(ABILITY_PET_MAGIC_RESIST , (unit caster) -> increasePetMagicResist(caster))
    // EventListener.onCast(ABILITY_GROW_PET         , (unit caster) -> growPet(caster))

    // EventListener.onCast(ABILITY_PET_RELEASE             , (unit caster) -> resetStats(EventData.getTriggerPlayer()))
    // EventListener.onCast(ABILITY_PET_RELEASE_SHAPESHIFTER, (unit caster) -> resetStats(EventData.getTriggerPlayer()))

    // EventListener.add(EVENT_PLAYER_HERO_LEVEL) ->
    //     resetPetLevelCounter(EventData.getTriggerUnit().getOwner())

    // EventListener.onCast(ABILITY_PET_TAME) (unit caster) ->
    //     enableAbilities(caster)
    //     reapplyStats(caster.getOwner(), EventData.getSpellTargetUnit())

    // EventListener.onCast(ABILITY_PET_TAME_SHAPESHIFTER) (unit caster) ->
    //     enableAbilities(caster)
    //     reapplyStats(caster.getOwner(), EventData.getSpellTargetUnit())
