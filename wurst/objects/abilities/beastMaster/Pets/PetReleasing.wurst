package PetReleasing

// Standard library imports:
import ClosureEvents
import ChannelAbilityPreset
import ClosureTimers
import LinkedList
import Texttag

// Local imports:
import ColorUtils
import LocalObjectIDs
import LocalAssets
import Pets
import StringExtensions
import Tribe
import ToolTipsUtils
import PlayerExtensions
import GeometryUtils
import OrderIds
import PetUpgradeHandler

let RELEASE_WANDER_DISTANCE = 2000.
let TRANSPARENCY_NUM_LOOPS = 51
let TRANSPARENCY_PER_LOOP = 5
let LOOP_FREQUENCY = .1

let releaseTextList = asList("Farewell", "Godspeed", "May we meet again", "Live freely", "Adieu")

function createReleasePetAbility(int newAbilId) returns ChannelAbilityPreset
    return new ChannelAbilityPreset(newAbilId, 1, true)
        ..setAnimationNames("spell,throw")
        ..setIconNormal(LocalIcons.bTNReleasePet)
        ..setArtCaster("")
        ..setCasterAttachmentPoint("")
        ..setCooldown(1, 5.0)
        ..setFollowThroughTime(1, 1.0)
        ..setName("Release Pet")
        ..setTooltipNormalExtended(1, "Releases your pet back into the wild allowing you to tame another. The released pet will run away never to be seen again.")
        ..setRequirements(UPGD_PET_TAMED_TRUE.toRawCode())
        ..setEditorSuffix("(Wurst)")

@compiletime function createBaseReleaseSpell() returns ChannelAbilityPreset
    return createReleasePetAbility(ABILITY_PET_RELEASE)
    ..setButtonPositionNormalY(1)
    ..setButtonPositionNormalX(0)
    ..setHotkeyNormal("W")
    ..setTooltipNormal(1, makeToolTipNorm("W", "Release Your Pet"))

@compiletime function createShapeShifterReleaseSpell() returns ChannelAbilityPreset
    return createReleasePetAbility(ABILITY_PET_RELEASE_SHAPESHIFTER)
    ..setButtonPositionNormalY(1)
    ..setButtonPositionNormalX(2)
    ..setHotkeyNormal("S")
    ..setTooltipNormal(1, makeToolTipNorm("S", "Release Your Pet"))

public function releasePet(unit caster)
    // Look up the pet.
    let originalOwner = caster.getOwner()
    let pet = originalOwner.getPet()

    // Deregister the pet.
    originalOwner.removePet()

    originalOwner.setTechResearched(UPGD_PET_TAMED_TRUE, 0)
    originalOwner.setTechResearched(UPGD_PET_TAMED_FALSE, 1)

    // Prevent anything from interacting with the pet while it is despawning.
    pet.addAbility(AbilityIds.locust)

    // Transfer the ownership of the pet.
    pet.setOwner(Player(PLAYER_NEUTRAL_PASSIVE), true)

    // Start reducing transparency of pet.
    doPeriodicallyCounted(LOOP_FREQUENCY, TRANSPARENCY_NUM_LOOPS) (CallbackCounted cb) ->
        pet.setVertexColor(255, 255, 255, 255 - ((TRANSPARENCY_NUM_LOOPS - cb.getCount()) * TRANSPARENCY_PER_LOOP))
        // Once the timer is finished remove the pet.
        if cb.isLast()
            pet.remove()

    // Move the pet to a random point away from it.
    pet.issuePointOrderById(OrderIds.smart, pet.getPos().polarOffset(randomAngle(), RELEASE_WANDER_DISTANCE))

    // Texttag
    releaseTextList.shuffle()
    let text = "{0} {1}!".format(releaseTextList.getFirst(), pet.getName())
    if localPlayer.canSee(caster)
        CreateTextTag()
            ..setText(text, 10)
            ..setPos(caster.getPos3Real())
            ..setColor(colorA(0, 197, 255, 255))
            ..setVelocity(0., 0.04)
            ..setVisibility(true)
            ..setFadepoint(2.0)
            ..setLifespan(5.0)
            ..setPermanent(false)

    // Notify the owning tribe.
    let tribe = Tribe.ofPlayer(originalOwner)
    if tribe != null
        tribe.getMembers().forEach() (player member) ->
            member.print(pet.getName().color(HIGHLIGHT_COLOR) + " has been released into the wild...".color(GENERAL_COLOR))

function onRelease(unit caster)
    let originalOwner = caster.getOwner()
    let pet = originalOwner.getPet()

    petUpgradeHandlerInstance.get(pet).resetUpgrades()
    releasePet(caster)

init
    EventListener.onCast(ABILITY_PET_RELEASE, (unit caster) -> onRelease(caster))
    EventListener.onCast(ABILITY_PET_RELEASE_SHAPESHIFTER, (unit caster) -> onRelease(caster))
