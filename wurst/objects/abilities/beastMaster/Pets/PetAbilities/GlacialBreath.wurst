package GlacialBreath

// Standard Library Imports
import UpgradeObjEditing
import ChannelAbilityPreset
import ClosureEvents
import ClosureForGroups
import ClosureTimers
import Assets
import BuffObjEditing
import DestructableObjEditing
import HashMap

// Local imports:
import LocalObjectIDs
import PlayerExtensions
import ToolTipsUtils
import ColorUtils
import StringExtensions
import LocalAssets
import Pets
import Transformation
import PetUpgradeHandler
import CustomProjectile
import SpiritualGuidance
import HealingSystem


let GLACIAL_BREATH_TOOLTIP = "Glacial Breath"
let GLACIAL_BREATH_TOOLTIP_EXT = ""
let GLACIAL_BREATH_DURATION = 5.

let ICE_BLOCK_HP_INCREASE_PER_SEC = 25.
let ICE_BLOCK_AOE = 100.

@compiletime function createGlacialBreathUpgrade() returns UpgradeDefinition
    return new UpgradeDefinition(UPGD_GLACIAL_BREATH)
        ..addEffectAbilityLevelBonus(1, 1, ABILITY_GLACIAL_BREATH.toRawCode())
        ..setLevels(5)
        ..setName(1, "Glacial Breath bonus")
        ..setIcon(1, Icons.bTNBreathOfFrost)

@compiletime function createUpgradeAbility() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_PET_GLACIAL_BREATH_UPGD, 5, true)
        ..setHeroAbility(false)
        ..presetCastRange(lvl -> 99999)
        ..presetCooldown(lvl -> 0)
        ..presetFollowThroughTime(lvl -> 0)
        ..presetArtDuration(lvl -> 0)
        ..setAnimationNames("")
        ..setName("Increase Glacial Breath")
        ..setIconNormal(Icons.bTNBreathOfFrost)
        ..presetButtonPosNormal(0, 2)
        ..setHotkeyNormal("Z")
        ..setArtCaster(Abilities.aIsmTarget)
        ..presetManaCost(lvl -> 2 * lvl)
        ..presetTooltipNormal(lvl -> makeToolTipNormUpgradeLevel("Z", GLACIAL_BREATH_TOOLTIP, lvl))
        ..presetTooltipNormalExtended(lvl -> GLACIAL_BREATH_TOOLTIP_EXT  + "\n\n"
                                     + toolTipUpgradeData("Current Damage Bonus", ICE_BLOCK_HP_INCREASE_PER_SEC.toInt(), lvl, COLOR_RED) + "\n"
                                     + toolTipUpgradeData("Max Damage Bonus", ICE_BLOCK_HP_INCREASE_PER_SEC.toInt(), 11, COLOR_RED)
                                     + " (+ {0} when playing as Druid)".format((ICE_BLOCK_HP_INCREASE_PER_SEC * PET_UPGRADE_BONUS).toString().color(COLOR_RED))
                                     )

@compiletime function createGlacialBreath() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_GLACIAL_BREATH, 5, true)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 0)
        ..setHeroAbility(false)
        ..setItemAbility(false)
        ..presetTargetTypes(Targettype.POINT)
        ..setName(GLACIAL_BREATH_TOOLTIP)
        ..presetTooltipNormal(lvl -> makeToolTipNormLevel("D", GLACIAL_BREATH_TOOLTIP, lvl))
        ..presetTooltipNormalExtended(lvl -> GLACIAL_BREATH_TOOLTIP_EXT)
        ..setIconNormal(Icons.bTNBreathOfFrost)
        ..setIconResearch(Icons.bTNBreathOfFrost)
        ..setIconTurnOff(Icons.bTNBreathOfFrost)
        ..setFollowThroughTime(1, GLACIAL_BREATH_DURATION)
        ..setAnimationNames("")
        ..presetOption(Option.TARGETIMAGE, true)
        ..presetAreaofEffect(lvl -> ICE_BLOCK_AOE)

@compiletime function createIceBlockDefinition() returns BuildingDefinition
    return new BuildingDefinition(UNIT_ICE_BLOCK, UnitIds.farm)
        ..setModelFile(Abilities.freezingBreathTargetArt)
        ..setHitPointsMaximumBase(250)
        ..setGroundTexture("")
        ..setIconGameInterface(Icons.bTNFreezingBreath)
        ..setArtSpecial("")
        ..setConstructionSound("FreezingBreath")
        ..setBuildTime(GLACIAL_BREATH_DURATION.toInt())
        ..setSightRadiusDay(0)
        ..setSightRadiusNight(0)
        ..setUpgradesUsed("")
        ..setName("Ice Block")
        ..setHitPointsRegenerationRate(-1)
        ..setHitPointsRegenerationType("always")
        ..setFoodProduced(0)
        ..setFoodCost(0)
        ..setArmorType(ArmorType.Large)

HashMap<unit, unit> iceBlockInstances = new HashMap<unit, unit>()

class GlacialBreathProjectile extends CustomProjectile
    int abilLevel
    unit caster

    construct(vec3 startPos, vec3 targetPos, real groundSpeed, string effectPath, int abilLevel, unit caster)
        super(startPos, targetPos, groundSpeed, 20, effectPath)
        this.abilLevel = abilLevel
        this.caster = caster

    override function onImpact()
        if not iceBlockInstances.has(caster)
            print(caster.getPos().toString())
            print(this.targetPos.toString())
            let u = createUnit(players[0], UNIT_ICE_BLOCK, targetPos, (270.).asAngleDegrees())
                    ..setLife(abilLevel * ICE_BLOCK_HP_INCREASE_PER_SEC)
            iceBlockInstances.put(caster, u)
        else
            new HealingInstance(iceBlockInstances.get(caster), ICE_BLOCK_HP_INCREASE_PER_SEC, HealingType.ABILITY)


HashMap<unit, GlacialBreath> channelingInstances = new HashMap<unit,GlacialBreath>()

class GlacialBreath
    bool isChanneling
    vec2 targetPos
    unit caster
    int abilLevel
    var dmgTrig = CreateTrigger()

    function glacialBreathLoop()
        new GlacialBreathProjectile(
            caster.getPos3Fly() + vec3(0, 90, -60),
            targetPos.withTerrainZ(),
            300,
            Abilities.freezingBreathMissile,
            abilLevel,
            caster
            )
        doPeriodicallyCounted(1.3, 5) (CallbackCounted cb) ->
            if isChanneling
                new GlacialBreathProjectile(
                    caster.getPos3Fly() + vec3(0, 90, -60),
                    targetPos.withTerrainZ(),
                    300,
                    Abilities.freezingBreathMissile,
                    abilLevel,
                    caster
                    )
            else
                cb.stop()

    construct(unit caster, vec2 targetPos)
        this.isChanneling = true
        this.caster = caster
        this.targetPos = targetPos
        this.abilLevel = caster.getAbilityLevel(ABILITY_GLACIAL_BREATH)

        glacialBreathLoop()


init
    EventListener.onPointCast(ABILITY_GLACIAL_BREATH) (unit caster, vec2 targetPos) ->
        if channelingInstances.has(caster)
            channelingInstances.getAndRemove(caster)
        channelingInstances.put(caster, new GlacialBreath(caster, targetPos))

    EventListener.add(EVENT_PLAYER_UNIT_SPELL_ENDCAST) ->
        if GetSpellAbilityId() == ABILITY_GLACIAL_BREATH
            let caster = GetSpellAbilityUnit()
            if (channelingInstances.has(caster))
                var instance = channelingInstances.get(caster)
                instance.isChanneling = false
            doAfter(1.3) ->
                if iceBlockInstances.has(caster)
                    iceBlockInstances.remove(caster)
