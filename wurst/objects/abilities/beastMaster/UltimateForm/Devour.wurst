package Devour

// Standard lib Imports:
import ChannelAbilityPreset
import ClosureEvents
import HashMap
import ObjectIdGenerator
import ObjectIds
import Assets
import UpgradeObjEditing

// Local Imports:
import PlayerExtensions
import LocalAssets
import ToolTipsUtils
import LocalObjectIDs

let ABIL_DODGE = compiletime(ABIL_ID_GEN.next())

let upgradeFromAnimalMap = new HashMap<int, int>()
    ..put(UNIT_ELK, UPGD_RENDO_JUMP)

let upgradeAbilityMap = new HashMap<int, int>()
    ..put(ABILITY_RENDO_JUMP, UPGD_RENDO_JUMP)


@compiletime function createDevourSpell() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_RENDO_DEVOUR, 1, true)
        ..presetTargetTypes(Targettype.UNIT)
        ..presetCooldown(lvl -> 0)
        ..presetManaCost(lvl -> 0)
        ..presetCastRange(lvl -> 100)
        ..presetButtonPosNormal(3, 1)
        ..setFollowThroughTime(1, 1.5)
        ..setIconNormal(Icons.bTNDevour)


init
    EventListener.onTargetCast(ABILITY_RENDO_DEVOUR) (unit caster, unit target) ->
        if target.getHP() < 50
            if upgradeFromAnimalMap.has(target.getTypeId())
                caster.getOwner().setTechResearched(upgradeFromAnimalMap.get(target.getTypeId()), 1)

    EventListener.onPointCast(ABILITY_RENDO_JUMP) (unit caster, vec2 target) ->
        caster.getOwner().setTechResearched(upgradeAbilityMap.get(ABILITY_RENDO_JUMP), 0)
