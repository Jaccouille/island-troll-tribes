package Meditate

import HashMap
import ClosureEvents
import ClosureTimers
import Orders
import OverCharge
import ToolTipsUtils
import ChannelAbilityPreset
import Lodash
import Assets
import LocalObjectIDs

let COOLDOWN = 72.
let MANACOST = 0
let DURATION = 7.
let PERIOD_INTERVAL = 0.2
let MANA_PER_SECOND = 18.
let ABILITY_ICON = "ReplaceableTextures\\CommandButtons\\BTNMedidate.blp"
let EFFECT_PATH = Abilities.darkRitualTarget
let TOOLTIP_NORM = "Meditate"
let TOOLTIP_EXTENDED = "Channels to recover {0} mana over {1} seconds. Cancels on damage. Has {2} seconds cooldown."
                                .format((MANA_PER_SECOND * DURATION).toToolTipTeal(), DURATION.toToolTipLightBlue(), COOLDOWN.toToolTipLightBlue())

class Medidate extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        this.setTargetType(1, 0)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setIconNormal(ABILITY_ICON)
        this.setIconResearch(ABILITY_ICON)
        this.setIconTurnOff(ABILITY_ICON)
        this.setHeroAbility(false)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM)
        this.setDisableOtherAbilities(1, false)
        this.setFollowThroughTime(1, DURATION)
        this.setCastingTime(1, 0)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, TOOLTIP_NORM))
        this.setTooltipNormalExtended(1, TOOLTIP_EXTENDED)
        this.setOptions(1, 1)
        this.setCooldown(1, COOLDOWN)
        this.setManaCost(1, MANACOST)

@compiletime function createMeditate()
    new Medidate(ABILITY_MEDITATE, "D", new Pair(2, 1))

HashMap<unit, MeditateInstance> instances = new HashMap<unit,MeditateInstance>()

class MeditateInstance
    bool isChanneling
    bool isOvercharged
    unit caster
    var dmgTrig = CreateTrigger()

    function manaLoop()
        //Special effects loop
        doPeriodicallyTimed(1, DURATION) fxloop ->
            if (isChanneling or isOvercharged)
                var efx = AddSpecialEffectTargetUnitBJ("origin", caster, EFFECT_PATH)
                efx.setTimeScale(2)
                doAfter(1) ->
                    efx.destr()
            else
                fxloop.stop()

        //Actual mana loop
        doPeriodicallyTimed(PERIOD_INTERVAL, DURATION) managiverloop ->
            if (isChanneling or isOvercharged)
                var newmana = caster.getMana() + PERIOD_INTERVAL * MANA_PER_SECOND
                caster.setMana(newmana)
            else
                managiverloop.stop()

            if (managiverloop.isLast())
                destroy this

    construct(unit casterUnit, bool overCharged)
        isChanneling = true
        isOvercharged = overCharged
        caster = casterUnit
        manaLoop()

    ondestroy
        if (instances.has(caster))
            if (instances.get(caster) == this)
                instances.remove(caster)


function onCast()
    var caster = GetSpellAbilityUnit()

    if instances.has(caster)
        instances.getAndRemove(caster)

    instances.put(caster, new MeditateInstance(caster, consumeOvercharge(caster)))

function onDamage(unit target, real amount)
    if instances.has(target) and amount >= 0.5
        var instance = instances.get(target)
        if not instance.isOvercharged
            target.issueImmediateOrderById(Orders.stop)
        instance.isChanneling = false
        instance.isOvercharged = false

function onEndCast()
    if GetSpellAbilityId() == ABILITY_MEDITATE
        var caster = GetSpellAbilityUnit()
        if (instances.has(caster))
            var instance = instances.get(caster)
            instance.isChanneling = false
init
    registerSpellEffectEvent(ABILITY_MEDITATE, () -> onCast())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_ENDCAST, () -> onEndCast())

    EventListener.add(EVENT_UNIT_DAMAGED) ->
        onDamage(GetTriggerUnit(), GetEventDamage().abs())
